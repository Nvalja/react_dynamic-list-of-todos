{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","userId","query","select","shuffle","handleChange","event","target","name","value","setState","toTitleSearch","todo","title","toLowerCase","includes","toSelectFilter","completed","hangleSuffled","this","props","todos","checkTodo","checkUser","filtredTodos","filter","suffledTodos","map","sort","Math","random","a","b","checkedTodos","className","type","placeholder","onChange","disabled","onClick","key","id","classnames","checked","readOnly","React","Component","request","url","fetch","then","response","ok","Error","status","statusText","json","result","data","getUser","CurrentUser","email","phone","loadUser","user","error","prevProps","clearUser","App","selectedUserId","handleTodoCheck","todoId","prevState","handleUserCheck","handleClear","print","console","warn","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fac3c936.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './TodoList.scss';\nimport classnames from 'classnames';\n\nexport class TodoList extends React.Component {\n  state = {\n    userId: 0,\n    query: '',\n    select: '',\n    shuffle: false,\n  };\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n      shuffle: false,\n    });\n  }\n\n  toTitleSearch = (todo) => {\n    const { query } = this.state;\n\n    if (todo.title !== null) {\n      return todo.title.toLowerCase().includes(query.toLowerCase());\n    }\n\n    return false;\n  }\n\n  toSelectFilter = (todo) => {\n    const { select } = this.state;\n\n    switch (select) {\n      case 'active':\n        return !todo.completed;\n      case 'completed':\n        return todo.completed;\n      default:\n        return todo;\n    }\n  }\n\n  hangleSuffled = () => {\n    this.setState({\n      shuffle: true,\n      select: '',\n    });\n  }\n\n  render() {\n    const { todos, checkTodo, checkUser } = this.props;\n    const { userId, query, select, shuffle } = this.state;\n    const filtredTodos = todos.filter(this.toTitleSearch)\n      .filter(this.toSelectFilter);\n\n    const suffledTodos = todos.map(todo => ({\n      sort: Math.random(),\n      value: todo,\n    }))\n      .sort((a, b) => a.sort - b.sort)\n      .map(a => a.value);\n\n    const checkedTodos = shuffle\n      ? suffledTodos\n      : filtredTodos;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <input\n            type=\"text\"\n            name=\"query\"\n            className=\"TodoList__title\"\n            value={query}\n            placeholder=\"write ro search by title\"\n            onChange={this.handleChange}\n          />\n          <div className=\"TodoList__buttons\">\n            <select\n              name=\"select\"\n              className=\"TodoList__checkbox\"\n              value={select}\n              onChange={this.handleChange}\n            >\n              <option value=\"\" disabled>choose filter</option>\n              <option value=\"all\">all</option>\n              <option value=\"active\">active</option>\n              <option value=\"completed\">completed</option>\n            </select>\n            <button\n              type=\"button\"\n              className=\"TodoList__random-button\"\n              onClick={this.hangleSuffled}\n            >\n              Randomize\n            </button>\n          </div>\n          <ul className=\"TodoList__list\">\n            {checkedTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={classnames('TodoList__item', {\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                })}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    name=\"remember\"\n                    checked={todo.completed}\n                    readOnly\n                    onClick={() => checkTodo(todo.id)}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classnames('button',\n                    'TodoList__user-button', {\n                      'TodoList__user-button--selected': userId !== todo.userId,\n                    })}\n                  type=\"button\"\n                  onClick={() => {\n                    this.setState({\n                      userId: todo.userId,\n                    });\n                    checkUser(todo.userId);\n                  }}\n                >\n                  User&nbsp;\n                  { todo.userId }\n                </button>\n              </li>\n\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n      title: PropTypes.string,\n    }).isRequired,\n  ).isRequired,\n  checkTodo: PropTypes.func.isRequired,\n  checkUser: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nconst request = url => fetch(`${BASE_URL}${url}`)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  })\n  .then(result => result.data);\n\nexport const getTodos = () => request('/todos');\nexport const getUser = id => request(`/users/${id}`);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    id: 0,\n    name: '',\n    email: '',\n    phone: '',\n  };\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.userId !== prevProps.userId && this.state) {\n      this.loadUser();\n    }\n  }\n\n  loadUser = async() => {\n    try {\n      const user = await getUser(this.props.userId);\n\n      this.setState({\n        id: user.id,\n        name: user.name,\n        email: user.email,\n        phone: user.phone,\n        error: false,\n      });\n    } catch (error) {\n      this.setState({\n        error: true,\n      });\n    }\n  }\n\n  render() {\n    const { id, name, email, phone, error } = this.state;\n\n    if (error) {\n      return <p>--User-not-found--</p>;\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n        <button\n          type=\"button\"\n          className=\"CurrentUser__button\"\n          onClick={this.props.clearUser}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    try {\n      const print = await getTodos();\n\n      this.setState({\n        todos: [...print],\n      });\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.warn(error);\n    }\n  }\n\n  handleTodoCheck = (todoId) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id === todoId) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  handleUserCheck = (userId) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  }\n\n  handleClear = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            checkTodo={this.handleTodoCheck}\n            checkUser={this.handleUserCheck}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.handleClear}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}